#include <Gamebuino-Meta.h>
#include "Character.h"
#include "Constants.h"
#include "World.h"
#include "AStar.h"
#include "Camera.h"
#include "SoundManager.h"

const uint8_t coinGuiBuff[] = {8, 8, 1, 0, 0, 0x02, 1, 0x22, 0x22,0x22, 0x22,0x22, 0x2a,0x92, 0x22,0x22, 0xaa,0xa9, 0x22,0x22, 0xaa,0xa9, 0x22,0x22, 0xaa,0xa9, 0x22,0x22, 0x2a,0x92, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22,0x22, 0x22};
Image coinGui = Image(coinGuiBuff);
const uint8_t coinBuff[] = {8, 8, 5, 0, 3, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xea,0x9e, 0xee,0xee, 0xaa,0xa9, 0xee,0xee, 0xaa,0xa9, 0xee,0xee, 0xaa,0xa9, 0xee,0xee, 0xea,0x9e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe7,0xfe, 0xee,0xee, 0xaa,0x7f, 0xee,0xee, 0xaa,0xaf, 0xee,0xee, 0xaa,0xa9, 0xee,0xee, 0xea,0x9e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe7,0xfe, 0xee,0xee, 0x77,0x7f, 0xee,0xee, 0xa7,0x7f, 0xee,0xee, 0xaa,0x7f, 0xee,0xee, 0xea,0x9e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xea,0x9e, 0xee,0xee, 0x7a,0xa9, 0xee,0xee, 0x77,0xa9, 0xee,0xee, 0x77,0x79, 0xee,0xee, 0xe7,0xfe, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xea,0x9e, 0xee,0xee, 0xaa,0xa9, 0xee,0xee, 0xaa,0xa9, 0xee,0xee, 0x7a,0xa9, 0xee,0xee, 0xe7,0x9e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee};
Image coin = Image(coinBuff);
const uint8_t heartGuiData[] = {8, 8, 1, 0, 0, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0x8e,0x82, 0xee,0xe8, 0x88,0x88, 0x2e,0xe8, 0x88,0x88, 0x2e,0xee, 0x88,0x82, 0xee,0xee, 0xe8,0x2e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee};
Image heartGui = Image(heartGuiData);
const uint8_t heartEmptyGuiData[] = {8, 8, 1, 0, 0, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0x7e,0x76, 0xee,0xe7, 0xe7,0xe7, 0x6e,0xe7, 0xee,0xe7, 0x6e,0xee, 0x7e,0x76, 0xee,0xee, 0xe7,0x6e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee};
Image heartEmptyGui = Image(heartEmptyGuiData);
const uint8_t heartData[] = {8, 8, 5, 0, 3, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0x8e,0x82, 0xee,0xe8, 0x88,0x88, 0x2e,0xe8, 0x88,0x88, 0x2e,0xee, 0x88,0x82, 0xee,0xee, 0xe8,0x2e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x8e,0x76, 0xee,0xe8, 0x88,0x77, 0x6e,0xe8, 0x88,0x87, 0x6e,0xee, 0x88,0x82, 0xee,0xee, 0xe8,0x2e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x7e,0x76, 0xee,0xe8, 0x77,0x77, 0x6e,0xe8, 0x87,0x77, 0x6e,0xee, 0x88,0x76, 0xee,0xee, 0xe8,0x2e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x7e,0x82, 0xee,0xe7, 0x77,0x88, 0x2e,0xe7, 0x77,0x78, 0x2e,0xee, 0x77,0x76, 0xee,0xee, 0xe7,0x6e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x8e,0x82, 0xee,0xe7, 0x88,0x88, 0x2e,0xe7, 0x78,0x88, 0x2e,0xee, 0x77,0x82, 0xee,0xee, 0xe7,0x6e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee};
Image heart = Image(heartData);
const uint8_t slashBuff[] = {8, 8, 4, 0, 1, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xe7, 0xee,0xee, 0xee,0xee, 0x7e,0xee, 0xee,0xee, 0xe7,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xe7, 0xee,0xee, 0xee,0xee, 0x7e,0xee, 0xee,0xee, 0xe7,0xee, 0xee,0xee, 0xee,0x7e, 0xee,0xee, 0xee,0xe7, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe7,0xee, 0xee,0xee, 0xee,0x7e, 0xee,0xee, 0xee,0xe7, 0xee,0xee, 0xee,0xee, 0x7e,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0x7e, 0xee,0xee, 0xee,0xe7, 0xee,0xee, 0xee,0xee, 0x7e,0xee, 0xee,0xee, 0xee};
Image slash = Image(slashBuff);
const uint8_t bloodSlashBuff[] = {8, 8, 4, 0, 1, 0x0E, 1, 0xee, 0xe8,0xee, 0xee,0xe8, 0xee,0x7e, 0xee,0xee, 0x8e,0xee, 0xee,0x8e, 0xe7,0xee, 0xee,0xe7, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe8,0xee, 0xee,0xee, 0xee,0x8e, 0xee,0xee, 0x8e,0xe8, 0xee,0x8e, 0xe8,0xee, 0x7e,0xe8, 0xee,0x8e, 0xee,0xee, 0x8e,0xe7, 0xee,0xee, 0xe7,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0x8e, 0xee,0xee, 0xee,0xe8, 0xee,0xee, 0xe8,0xee, 0x8e,0xe8, 0xee,0x8e, 0xe7,0xee, 0x8e,0xe8, 0xee,0xee, 0xe8,0xee, 0x8e,0xee, 0xee,0x7e, 0xe7,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x8e,0xee, 0xee,0xee, 0xe8,0xee, 0xee,0xe8, 0xee,0xee, 0xe8,0xee, 0x8e,0xee, 0xee,0x8e, 0xe8};
Image bloodSlash = Image(bloodSlashBuff);
const uint8_t chestBuff[] = {8, 8, 2, 0, 0, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xea, 0x88,0x88, 0xae,0xea, 0x88,0x88, 0xae,0xea, 0xaa,0xaa, 0xae,0xe9, 0x29,0x92, 0x9e,0xe9, 0x22,0x22, 0x9e,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xea, 0xaa,0xaa, 0xae,0xea, 0x55,0x55, 0xae,0xea, 0xaa,0xaa, 0xae,0xe9, 0x22,0x22, 0x9e,0xe9, 0x22,0x22, 0x9e};
Image chest = Image(chestBuff);
const byte playerSpriteRightBuff[] = {8, 10, 2, 0, 2, 0x0E, 1, 0xee, 0x77,0x77, 0xee,0xee, 0x70,0x70, 0xee,0xec, 0x77,0x77, 0xee,0xcc, 0xd7,0x7e, 0xe0,0xcd, 0x1d,0xde, 0x0e,0xec, 0xd1,0x00, 0xee,0xec, 0xdd,0xde, 0xee,0xee, 0xde,0xde, 0xee,0xee, 0x1e,0x1e, 0xee,0xee, 0x0e,0x0e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x77,0x77, 0xee,0xee, 0x70,0x70, 0xee,0xec, 0x77,0x77, 0xee,0xcc, 0xd7,0x7e, 0xe0,0xcd, 0x1d,0xde, 0x0e,0xec, 0xd1,0x00, 0xee,0xec, 0xdd,0xde, 0xee,0xee, 0x1d,0x1e, 0xee,0xee, 0x0e,0x0e, 0xee};
Image playerSpriteRight = Image(playerSpriteRightBuff);
const uint8_t playerSpriteLeftBuff[] = {8, 10, 2, 0, 2, 0x0E, 1, 0xee, 0x77,0x77, 0xee,0xee, 0x07,0x07, 0xee,0xee, 0x77,0x77, 0xce,0x0e, 0xe7,0x7d, 0xcc,0xe0, 0xed,0xd1, 0xdc,0xee, 0x00,0x1d, 0xce,0xee, 0xed,0xdd, 0xce,0xee, 0xed,0xed, 0xee,0xee, 0xe1,0xe1, 0xee,0xee, 0xe0,0xe0, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x77,0x77, 0xee,0xee, 0x07,0x07, 0xee,0xee, 0x77,0x77, 0xce,0x0e, 0xe7,0x7d, 0xcc,0xe0, 0xed,0xd1, 0xdc,0xee, 0x00,0x1d, 0xce,0xee, 0xed,0xdd, 0xce,0xee, 0xe1,0xd1, 0xee,0xee, 0xe0,0xe0, 0xee};
Image playerSpriteLeft = Image(playerSpriteLeftBuff);
const uint8_t enemySprRightBuff[] = {8, 8, 2, 0, 2, 0x0E, 1, 0xee, 0xee,0x99, 0x9e,0xee, 0xe2,0x97, 0x97,0xee, 0x22,0x99, 0x9e,0xee, 0x28,0x28, 0xee,0xee, 0xe2,0x80, 0x00,0xee, 0xe8,0x88, 0xee,0xee, 0xe8,0xe8, 0xee,0xee, 0xe2,0xe2, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0x99, 0x9e,0xee, 0xe2,0x97, 0x97,0xee, 0x22,0x99, 0x9e,0xee, 0x28,0x28, 0xee,0xee, 0xe2,0x80, 0x00,0xee, 0xe8,0xe8, 0xee,0xee, 0xe2,0xe2, 0xee};
Image enemySprRight = Image(enemySprRightBuff);
const uint8_t enemySprLeftBuff[] = {8, 8, 2, 0, 2, 0x0E, 1, 0xee, 0x99,0x9e, 0xee,0xe7, 0x97,0x92, 0xee,0xee, 0x99,0x92, 0x2e,0xee, 0xe8,0x28, 0x2e,0xe0, 0x00,0x82, 0xee,0xee, 0xe8,0x88, 0xee,0xee, 0xe8,0xe8, 0xee,0xee, 0xe2,0xe2, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x99,0x9e, 0xee,0xe7, 0x97,0x92, 0xee,0xee, 0x99,0x92, 0x2e,0xee, 0xe8,0x28, 0x2e,0xe0, 0x00,0x82, 0xee,0xee, 0xe8,0xe8, 0xee,0xee, 0xe2,0xe2, 0xee};
Image enemySprLeft = Image(enemySprLeftBuff);
const uint8_t enemyCorpseBuff[] = {8, 8, 2, 0, 0, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe9,0x99, 0xee,0xee, 0x29,0x79, 0x7e,0xe2, 0x89,0x99, 0x2e,0xe8, 0x22,0x82, 0x8e,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x99,0x9e, 0xee,0xe7, 0x97,0x92, 0xee,0xe2, 0x99,0x98, 0x2e,0xe8, 0x28,0x22, 0x8e};
Image enemyCorpse = Image(enemyCorpseBuff);
const uint8_t goblinRightData[] = {8, 8, 2, 0, 2, 0x0E, 1, 0xee, 0xec,0xcc, 0xee,0xee, 0x1c,0x7c, 0x7e,0xe1, 0x1c,0xcc, 0xee,0xe1, 0x51,0x5e, 0xee,0xee, 0x15,0x00, 0x0e,0xee, 0x55,0x5e, 0xee,0xee, 0x5e,0x5e, 0xee,0xee, 0x1e,0x1e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xec,0xcc, 0xee,0xee, 0x1c,0x7c, 0x7e,0xe1, 0x1c,0xcc, 0xee,0xe1, 0x51,0x5e, 0xee,0xee, 0x15,0x00, 0x0e,0xee, 0x5e,0x5e, 0xee,0xee, 0x1e,0x1e, 0xee};
Image goblinRight = Image(goblinRightData);
const uint8_t goblinLeftData[] = {8, 8, 2, 0, 2, 0x0E, 1, 0xee, 0xcc,0xce, 0xee,0xe7, 0xc7,0xc1, 0xee,0xee, 0xcc,0xc1, 0x1e,0xee, 0xe5,0x15, 0x1e,0xe0, 0x00,0x51, 0xee,0xee, 0xe5,0x55, 0xee,0xee, 0xe5,0xe5, 0xee,0xee, 0xe1,0xe1, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xcc,0xce, 0xee,0xe7, 0xc7,0xc1, 0xee,0xee, 0xcc,0xc1, 0x1e,0xee, 0xe5,0x15, 0x1e,0xe0, 0x00,0x51, 0xee,0xee, 0xe5,0xe5, 0xee,0xee, 0xe1,0xe1, 0xee};
Image goblinLeft = Image(goblinLeftData);
const uint8_t goblinCorpseData[] = {8, 8, 2, 0, 0, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xec,0xcc, 0xee,0xee, 0x1c,0x7c, 0x7e,0xe1, 0x5c,0xcc, 0x1e,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xcc,0xce, 0xee,0xe7, 0xc7,0xc1, 0xee,0xe1, 0xcc,0xc5, 0x1e};
Image goblinCorpse = Image(goblinCorpseData);
const uint8_t skullRightBuff[] = {8, 8, 4, 0, 2, 0x0E, 1, 0xee, 0x77,0x76, 0xee,0xe7, 0x77,0x67, 0x7e,0xe7, 0x70,0x07, 0x00,0xe7, 0x60,0x07, 0x00,0xe6, 0x77,0x70, 0x7e,0xee, 0x77,0x77, 0xee,0xee, 0xe7,0xe7, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x77,0x76, 0xee,0xe7, 0x77,0x67, 0x7e,0xe7, 0x70,0x07, 0x00,0xe7, 0x60,0x07, 0x00,0xe6, 0x77,0x70, 0x7e,0xee, 0x77,0x77, 0xee,0xee, 0xe7,0xe7, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x77,0x76, 0xee,0xe7, 0x77,0x67, 0x7e,0xe7, 0x76,0x77, 0x7e,0xe7, 0x60,0x07, 0x00,0xe6, 0x70,0x07, 0x00,0xee, 0x77,0x70, 0x7e,0xee, 0xe7,0xe7, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x77,0x76, 0xee,0xe7, 0x77,0x67, 0x7e,0xe7, 0x70,0x07, 0x00,0xe7, 0x60,0x07, 0x00,0xe6, 0x77,0x70, 0x7e,0xee, 0x77,0x77, 0xee,0xee, 0xe7,0xe7, 0xee};
Image skullRight = Image(skullRightBuff);
const uint8_t skullLeftBuff[] = {8, 8, 4, 0, 2, 0x0E, 1, 0xee, 0x67,0x77, 0xee,0xe7, 0x76,0x77, 0x7e,0x00, 0x70,0x07, 0x7e,0x00, 0x70,0x06, 0x7e,0xe7, 0x07,0x77, 0x6e,0xee, 0x77,0x77, 0xee,0xee, 0x7e,0x7e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x67,0x77, 0xee,0xe7, 0x76,0x77, 0x7e,0x00, 0x70,0x07, 0x7e,0x00, 0x70,0x06, 0x7e,0xe7, 0x07,0x77, 0x6e,0xee, 0x77,0x77, 0xee,0xee, 0x7e,0x7e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x67,0x77, 0xee,0xe7, 0x76,0x77, 0x7e,0xe7, 0x77,0x67, 0x7e,0x00, 0x70,0x06, 0x7e,0x00, 0x70,0x07, 0x6e,0xe7, 0x07,0x77, 0xee,0xee, 0x7e,0x7e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x67,0x77, 0xee,0xe7, 0x76,0x77, 0x7e,0x00, 0x70,0x07, 0x7e,0x00, 0x70,0x06, 0x7e,0xe7, 0x07,0x77, 0x6e,0xee, 0x77,0x77, 0xee,0xee, 0x7e,0x7e, 0xee};
Image skullLeft = Image(skullLeftBuff);
const uint8_t skullCorpseBuff[] = {8, 8, 2, 0, 0, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x07,0x70, 0xee,0xe7, 0x07,0x67, 0x7e,0xe0, 0x70,0x07, 0x00,0xe7, 0x60,0x07, 0x00,0xee, 0x06,0x70, 0x7e,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x07,0x70, 0xee,0xe7, 0x07,0x67, 0x7e,0xe0, 0x70,0x07, 0x00,0xe7, 0x60,0x07, 0x00,0xee, 0x06,0x70, 0x7e};
Image skullCorpse = Image(skullCorpseBuff);
const uint8_t bloodskullRightBuff[] = {8, 8, 4, 0, 2, 0x0E, 1, 0xee, 0x87,0x78, 0xee,0xe8, 0x87,0x87, 0x7e,0xe7, 0x70,0x07, 0x00,0xe7, 0x80,0x07, 0x00,0xe8, 0x78,0x70, 0x7e,0xee, 0x78,0x77, 0xee,0xee, 0xe8,0xe8, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x87,0x78, 0xee,0xe8, 0x87,0x87, 0x7e,0xe7, 0x70,0x07, 0x00,0xe7, 0x80,0x07, 0x00,0xe8, 0x78,0x70, 0x7e,0xee, 0x78,0x77, 0xee,0xee, 0xe8,0xe8, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x87,0x78, 0xee,0xe8, 0x87,0x87, 0x7e,0xe7, 0x78,0x77, 0x7e,0xe7, 0x80,0x07, 0x00,0xe8, 0x70,0x07, 0x00,0xee, 0x78,0x70, 0xee,0xee, 0xe8,0xe8, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x87,0x78, 0xee,0xe8, 0x87,0x87, 0x7e,0xe7, 0x70,0x07, 0x00,0xe7, 0x80,0x07, 0x00,0xe8, 0x78,0x70, 0x7e,0xee, 0x78,0x77, 0xee,0xee, 0xe8,0xe8, 0xee};
Image bloodskullRight = Image(bloodskullRightBuff);
const uint8_t bloodskullLeftBuff[] = {8, 8, 4, 0, 2, 0x0E, 1, 0xee, 0x87,0x78, 0xee,0xe7, 0x78,0x78, 0x8e,0x00, 0x70,0x07, 0x7e,0x00, 0x70,0x08, 0x7e,0xe7, 0x07,0x87, 0x8e,0xee, 0x77,0x87, 0xee,0xee, 0x8e,0x8e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x87,0x78, 0xee,0xe7, 0x78,0x78, 0x8e,0x00, 0x70,0x07, 0x7e,0x00, 0x70,0x08, 0x7e,0xe7, 0x07,0x87, 0x8e,0xee, 0x77,0x87, 0xee,0xee, 0x8e,0x8e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x87,0x78, 0xee,0xe7, 0x78,0x78, 0x8e,0xe7, 0x77,0x87, 0x7e,0x00, 0x70,0x08, 0x7e,0x00, 0x70,0x07, 0x8e,0xee, 0x07,0x87, 0xee,0xee, 0x8e,0x8e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x87,0x78, 0xee,0xe7, 0x78,0x78, 0x8e,0x00, 0x70,0x07, 0x7e,0x00, 0x70,0x08, 0x7e,0xe7, 0x07,0x87, 0x8e,0xee, 0x77,0x87, 0xee,0xee, 0x8e,0x8e, 0xee};
Image bloodskullLeft = Image(bloodskullLeftBuff);
const uint8_t bloodskullCorpseBuff[] = {8, 8, 2, 0, 0, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x08,0x70, 0xee,0xe8, 0x87,0x87, 0x7e,0xe0, 0x80,0x07, 0x00,0xe7, 0x88,0x07, 0x00,0xee, 0x08,0x70, 0x8e,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x07,0x80, 0xee,0xe7, 0x78,0x78, 0x8e,0x00, 0x70,0x08, 0x0e,0x00, 0x70,0x88, 0x7e,0xe8, 0x07,0x80, 0xee};
Image bloodskullCorpse = Image(bloodskullCorpseBuff);
const uint8_t ghostRightBuff[] = {8, 8, 4, 0, 5, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xed,0xcc, 0xee,0xee, 0xdc,0x7c, 0x7e,0xee, 0xdc,0xcc, 0xce,0xee, 0xdc,0xcc, 0xce,0xee, 0xdc,0xcc, 0xce,0xee, 0xec,0xec, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xed,0xcc, 0xee,0xee, 0xdc,0x7c, 0x7e,0xee, 0xdc,0xcc, 0xce,0xee, 0xdc,0xcc, 0xce,0xee, 0xdc,0xcc, 0xce,0xee, 0xde,0xce, 0xce,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xed,0xcc, 0xee,0xee, 0xdc,0xcc, 0xce,0xee, 0xdc,0x7c, 0x7e,0xee, 0xdc,0xcc, 0xce,0xee, 0xdc,0xcc, 0xce,0xee, 0xec,0xec, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xed,0xcc, 0xee,0xee, 0xdc,0xcc, 0xce,0xee, 0xdc,0x7c, 0x7e,0xee, 0xdc,0xcc, 0xce,0xee, 0xdc,0xcc, 0xce,0xee, 0xde,0xce, 0xce,0xee, 0xee,0xee, 0xee};
Image ghostRight = Image(ghostRightBuff);
const uint8_t ghostLeftBuff[] = {8, 8, 4, 0, 5, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xec,0xcd, 0xee,0xee, 0x7c,0x7c, 0xde,0xee, 0xcc,0xcc, 0xde,0xee, 0xcc,0xcc, 0xde,0xee, 0xcc,0xcc, 0xde,0xee, 0xec,0xec, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xec,0xcd, 0xee,0xee, 0x7c,0x7c, 0xde,0xee, 0xcc,0xcc, 0xde,0xee, 0xcc,0xcc, 0xde,0xee, 0xcc,0xcc, 0xde,0xee, 0xce,0xce, 0xde,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xec,0xcd, 0xee,0xee, 0xcc,0xcc, 0xde,0xee, 0x7c,0x7c, 0xde,0xee, 0xcc,0xcc, 0xde,0xee, 0xcc,0xcc, 0xde,0xee, 0xec,0xec, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xec,0xcd, 0xee,0xee, 0xcc,0xcc, 0xde,0xee, 0x7c,0x7c, 0xde,0xee, 0xcc,0xcc, 0xde,0xee, 0xcc,0xcc, 0xde,0xee, 0xce,0xce, 0xde,0xee, 0xee,0xee, 0xee};
Image ghostLeft = Image(ghostLeftBuff);
const uint8_t ghostCorpseBuff[] = {8, 8, 2, 0, 0, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xec,0x7e, 0xee,0xee, 0x7c,0xcc, 0xee,0xe1, 0xcc,0xdc, 0xde,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe7,0xce, 0xee,0xee, 0xcc,0xc7, 0xee,0xed, 0xcd,0xcc, 0x1e};
Image ghostCorpse = Image(ghostCorpseBuff);
const uint8_t ratRightBuff[] = {8, 8, 4, 0, 4, 0x0C, 1, 0xc2, 0x2c,0xcc, 0xcc,0x2e, 0xe2,0xcc, 0xcc,0x22, 0xe7,0x27, 0xcc,0xc2, 0x22,0x22, 0x2c,0xcc, 0x22,0x2c, 0xce,0x2c, 0x2e,0xec, 0xcc,0xc2, 0x22,0xec, 0xcc,0xcc, 0x2c,0x2c, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xc2, 0x2c,0xcc, 0xcc,0x2e, 0xe2,0xcc, 0xcc,0x22, 0xe7,0x27, 0xcc,0xc2, 0x22,0x22, 0x2c,0xcc, 0x2e,0xec, 0xce,0x22, 0x22,0xec, 0xcc,0xcc, 0x2c,0x2c, 0xcc,0xc2, 0x2c,0xcc, 0xcc,0x2e, 0xe2,0xcc, 0xcc,0x22, 0xe7,0x27, 0xcc,0xc2, 0x22,0x22, 0x2c,0xcc, 0x22,0x2c, 0xce,0x2c, 0x2e,0xec, 0xcc,0xc2, 0x22,0xec, 0xcc,0xcc, 0x2c,0x2c, 0xcc,0xc2, 0x22,0xcc, 0xcc,0x2e, 0xe2,0x2c, 0xcc,0xc2, 0x72,0x7c, 0xcc,0xcc, 0x22,0x22, 0xcc,0xcc, 0x22,0x2c, 0xec,0x2c, 0x2e,0xec, 0xcc,0xc2, 0x22,0xec, 0xcc,0xcc, 0x2c,0x2c, 0xcc};
Image ratRight = Image(ratRightBuff);
const uint8_t ratLeftBuff[] = {8, 8, 4, 0, 4, 0x0C, 1, 0xcc, 0xcc,0xc2, 0x2c,0xcc, 0xcc,0x2e, 0xe2,0xcc, 0x72,0x7e, 0x22,0xc2, 0x22,0x22, 0x2c,0xec, 0xc2,0x22, 0xcc,0xcc, 0xce,0xe2, 0xc2,0xcc, 0xce,0x22, 0x2c,0xcc, 0xc2,0xc2, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xc2, 0x2c,0xcc, 0xcc,0x2e, 0xe2,0xcc, 0x72,0x7e, 0x22,0xc2, 0x22,0x22, 0x2c,0xec, 0xce,0xe2, 0xcc,0xcc, 0xce,0x22, 0x22,0xcc, 0xc2,0xc2, 0xcc,0xcc, 0xcc,0xc2, 0x2c,0xcc, 0xcc,0x2e, 0xe2,0xcc, 0x72,0x7e, 0x22,0xc2, 0x22,0x22, 0x2c,0xec, 0xc2,0x22, 0xcc,0xcc, 0xce,0xe2, 0xc2,0xcc, 0xce,0x22, 0x2c,0xcc, 0xc2,0xc2, 0xcc,0xcc, 0xcc,0x22, 0x2c,0xcc, 0xc2,0x2e, 0xe2,0xcc, 0xc7,0x27, 0x2c,0xcc, 0x22,0x22, 0xcc,0xce, 0xc2,0x22, 0xcc,0xcc, 0xce,0xe2, 0xc2,0xcc, 0xce,0x22, 0x2c,0xcc, 0xc2,0xc2, 0xcc};
Image ratLeft = Image(ratLeftBuff);
const uint8_t ratCorpseBuff[] = {8, 8, 2, 0, 0, 0x0C, 1, 0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xe2,0x2c, 0xcc,0xc2, 0xe2,0x7c, 0xec,0xc2, 0x72,0x22, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xc2,0x2e, 0xcc,0xce, 0xc7,0x2e, 0x2c,0xcc, 0x22,0x27, 0x2c};
Image ratCorpse = Image(ratCorpseBuff);
const uint8_t necromancerIdleRightData[] = {8, 10, 4, 0, 4, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xe0, 0x00,0xee, 0xee,0xee, 0x07,0xee, 0x9e,0xe0, 0x00,0x09, 0x89,0x00, 0x00,0x0e, 0x9e,0x0e, 0x00,0xe0, 0x5e,0xee, 0x00,0xee, 0x9e,0xe0, 0x00,0x0e, 0x9e,0xe0, 0x00,0x0e, 0x9e,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xe0, 0x00,0xee, 0x9e,0xee, 0x07,0xe9, 0x89,0xe0, 0x00,0x0e, 0x9e,0x00, 0x00,0x00, 0x5e,0x0e, 0x00,0xee, 0x9e,0xee, 0x00,0xee, 0x9e,0xe0, 0x00,0x0e, 0x9e,0xe0, 0x00,0x0e, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0x9e,0xe0, 0x00,0xe9, 0x89,0xee, 0x07,0xee, 0x9e,0xe0, 0x00,0x00, 0x5e,0x00, 0x00,0x0e, 0x9e,0x0e, 0x00,0xee, 0x9e,0xee, 0x00,0xee, 0x9e,0xe0, 0x00,0x0e, 0xee,0xe0, 0x00,0x0e, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xe0, 0x00,0xee, 0x9e,0xee, 0x07,0xe9, 0x89,0xe0, 0x00,0x0e, 0x9e,0x00, 0x00,0x00, 0x5e,0x0e, 0x00,0xee, 0x9e,0xee, 0x00,0xee, 0x9e,0xe0, 0x00,0x0e, 0x9e,0xe0, 0x00,0x0e, 0xee,0x00, 0x00,0x00, 0xee};
Image necromancerIdleRight = Image(necromancerIdleRightData);
const uint8_t necromancerIdleLeftData[] = {8, 10, 4, 0, 4, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xee,0x00, 0x0e,0xe9, 0xee,0x70, 0xee,0x98, 0x90,0x00, 0x0e,0xe9, 0xe0,0x00, 0x00,0xe5, 0x0e,0x00, 0xe0,0xe9, 0xee,0x00, 0xee,0xe9, 0xe0,0x00, 0x0e,0xe9, 0xe0,0x00, 0x0e,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0xe9, 0xee,0x00, 0x0e,0x98, 0x9e,0x70, 0xee,0xe9, 0xe0,0x00, 0x0e,0xe5, 0x00,0x00, 0x00,0xe9, 0xee,0x00, 0xe0,0xe9, 0xee,0x00, 0xee,0xe9, 0xe0,0x00, 0x0e,0xee, 0xe0,0x00, 0x0e,0xee, 0x00,0x00, 0x00,0xe9, 0xee,0xee, 0xee,0x98, 0x9e,0x00, 0x0e,0xe9, 0xee,0x70, 0xee,0xe5, 0x00,0x00, 0x0e,0xe9, 0xe0,0x00, 0x00,0xe9, 0xee,0x00, 0xe0,0xe9, 0xee,0x00, 0xee,0xee, 0xe0,0x00, 0x0e,0xee, 0xe0,0x00, 0x0e,0xee, 0x00,0x00, 0x00,0xee, 0xee,0xee, 0xee,0xe9, 0xee,0x00, 0x0e,0x98, 0x9e,0x70, 0xee,0xe9, 0xe0,0x00, 0x0e,0xe5, 0x00,0x00, 0x00,0xe9, 0xee,0x00, 0xe0,0xe9, 0xee,0x00, 0xee,0xe9, 0xe0,0x00, 0x0e,0xee, 0xe0,0x00, 0x0e,0xee, 0x00,0x00, 0x00};
Image necromancerIdleLeft = Image(necromancerIdleLeftData);
const uint8_t fireballData[] = {8, 4, 2, 0, 2, 0xFF, 1, 0x99, 0x99,0x99, 0x99,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x88, 0x88,0x99, 0x99,0x99, 0x99,0xaa, 0xaa,0xaa, 0xaa,0x99, 0x99,0x99, 0x99,0x99, 0x99,0x99, 0x99,0xaa, 0xaa,0xaa, 0xaa};
Image fireball = Image(fireballData);
const uint8_t necromancerChargeRightData[] = {8, 10, 3, 0, 2, 0x0E, 1, 0xee, 0xee,0xee, 0x9e,0xe0, 0x00,0xe9, 0x89,0xee, 0x07,0xee, 0x9e,0xe0, 0x00,0x0e, 0x9e,0xee, 0x00,0xe0, 0x5e,0xee, 0x00,0x0e, 0x9e,0xee, 0x00,0xee, 0x9e,0xe0, 0x00,0x0e, 0xee,0xe0, 0x00,0x0e, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xee, 0x8e,0xe0, 0x00,0xe8, 0x88,0xee, 0x07,0xee, 0x8e,0xe0, 0x00,0x0e, 0x9e,0xee, 0x00,0xe0, 0x5e,0xee, 0x00,0x0e, 0x9e,0xee, 0x00,0xee, 0x9e,0xe0, 0x00,0x0e, 0xee,0xe0, 0x00,0x0e, 0xee,0x00, 0x00,0x00, 0xee,0xee, 0xee,0xe8, 0x98,0xe0, 0x00,0xe9, 0x89,0xee, 0x07,0xe8, 0x98,0xe0, 0x00,0x0e, 0x9e,0xee, 0x00,0xe0, 0x5e,0xee, 0x00,0x0e, 0x9e,0xee, 0x00,0xee, 0x9e,0xe0, 0x00,0x0e, 0xee,0xe0, 0x00,0x0e, 0xee,0x00, 0x00,0x00, 0xee};
Image necromancerChargeRight = Image(necromancerChargeRightData);
const uint8_t necromancerChargeLeftData[] = {8, 10, 3, 0, 2, 0x0E, 1, 0xe9, 0xee,0xee, 0xee,0x98, 0x9e,0x00, 0x0e,0xe9, 0xee,0x70, 0xee,0xe9, 0xe0,0x00, 0x0e,0xe5, 0x0e,0x00, 0xee,0xe9, 0xe0,0x00, 0xee,0xe9, 0xee,0x00, 0xee,0xee, 0xe0,0x00, 0x0e,0xee, 0xe0,0x00, 0x0e,0xee, 0x00,0x00, 0x00,0xe8, 0xee,0xee, 0xee,0x88, 0x8e,0x00, 0x0e,0xe8, 0xee,0x70, 0xee,0xe9, 0xe0,0x00, 0x0e,0xe5, 0x0e,0x00, 0xee,0xe9, 0xe0,0x00, 0xee,0xe9, 0xee,0x00, 0xee,0xee, 0xe0,0x00, 0x0e,0xee, 0xe0,0x00, 0x0e,0xee, 0x00,0x00, 0x00,0x89, 0x8e,0xee, 0xee,0x98, 0x9e,0x00, 0x0e,0x89, 0x8e,0x70, 0xee,0xe9, 0xe0,0x00, 0x0e,0xe5, 0x0e,0x00, 0xee,0xe9, 0xe0,0x00, 0xee,0xe9, 0xee,0x00, 0xee,0xee, 0xe0,0x00, 0x0e,0xee, 0xe0,0x00, 0x0e,0xee, 0x00,0x00, 0x00};
Image necromancerChargeLeft = Image(necromancerChargeLeftData);
const uint8_t playerCorpseData[] = {8, 8, 2, 0, 0, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x77,0x77, 0xee,0xee, 0x77,0x77, 0xee,0xee, 0x70,0x70, 0xee,0xec, 0xd7,0x7c, 0xee,0xc0, 0xdd,0xc1, 0xce,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x77,0x77, 0xee,0xee, 0x77,0x77, 0xee,0xee, 0x07,0x07, 0xee,0xee, 0xc7,0x7d, 0xce,0xec, 0x1c,0xdd, 0x0c};
Image playerCorpse = Image(playerCorpseData);
const uint8_t golemRightData[] = {10, 10, 4, 0, 6, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xff,0xfe, 0xee,0xee, 0xe3,0xf7, 0xf7,0xee, 0xee,0xff, 0x3f,0xf5, 0xee,0xe3, 0x5f,0x53, 0x5f,0x3e, 0xe3,0x3f, 0xf3,0xff, 0x3e,0xe5, 0x3e,0x3f, 0x3e,0x5f, 0xe5,0xee, 0xf3,0xfe, 0x55,0xee, 0x5e,0x5f, 0x5e,0xee, 0xee,0xee, 0x5e,0x5e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xff, 0xfe,0xee, 0xee,0xf3, 0xf7,0xf7, 0xee,0xe3, 0x5f,0x3f, 0xf5,0x3e, 0xe3,0x3f, 0x53,0x5f, 0x3e,0xe5, 0x3e,0x3f, 0x3e,0x5f, 0xe5,0xee, 0xf3,0xfe, 0x55,0xee, 0x5e,0x5f, 0x5e,0xee, 0xee,0xee, 0x5e,0x5e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xff, 0xfe,0xee, 0xee,0xe3, 0xf7,0xf7, 0xee,0xee, 0xff,0x3f, 0xf5,0xee, 0xe3,0x5f, 0x53,0x5f, 0x3e,0xe3, 0x3f,0xf3, 0xff,0x3e, 0xe5,0x3e, 0x3f,0x3e, 0x5f,0xe5, 0xee,0xf3, 0xfe,0x55, 0xee,0x5e, 0x5e,0x5e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xff, 0xfe,0xee, 0xee,0xf3, 0xf7,0xf7, 0xee,0xe3, 0x5f,0x3f, 0xf5,0x3e, 0xe3,0x3f, 0x53,0x5f, 0x3e,0xe5, 0x3e,0x3f, 0x3e,0x5f, 0xe5,0xee, 0xf3,0xfe, 0x55,0xee, 0x5e,0x5f, 0x5e,0xee, 0xee,0xee, 0x5e,0x5e, 0xee};
Image golemRight = Image(golemRightData);
const uint8_t golemLeftData[] = {10, 10, 4, 0, 6, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xee,0xef, 0xff,0xee, 0xee,0xee, 0x7f,0x7f, 0x3e,0xee, 0xee,0x5f, 0xf3,0xff, 0xee,0xe3, 0xf5,0x35, 0xf5,0x3e, 0xe3,0xff, 0x3f,0xf3, 0x3e,0xf5, 0xe3,0xf3, 0xe3,0x5e, 0x55,0xef, 0x3f,0xee, 0x5e,0xee, 0xe5,0xf5, 0xe5,0xee, 0xee,0xe5, 0xe5,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xef,0xff, 0xee,0xee, 0xee,0x7f, 0x7f,0x3f, 0xee,0xe3, 0x5f,0xf3, 0xf5,0x3e, 0xe3,0xf5, 0x35,0xf3, 0x3e,0xf5, 0xe3,0xf3, 0xe3,0x5e, 0x55,0xef, 0x3f,0xee, 0x5e,0xee, 0xe5,0xf5, 0xe5,0xee, 0xee,0xe5, 0xe5,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xef,0xff, 0xee,0xee, 0xee,0x7f, 0x7f,0x3e, 0xee,0xee, 0x5f,0xf3, 0xff,0xee, 0xe3,0xf5, 0x35,0xf5, 0x3e,0xe3, 0xff,0x3f, 0xf3,0x3e, 0xf5,0xe3, 0xf3,0xe3, 0x5e,0x55, 0xef,0x3f, 0xee,0x5e, 0xee,0xe5, 0xe5,0xe5, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xef,0xff, 0xee,0xee, 0xee,0x7f, 0x7f,0x3f, 0xee,0xe3, 0x5f,0xf3, 0xf5,0x3e, 0xe3,0xf5, 0x35,0xf3, 0x3e,0xf5, 0xe3,0xf3, 0xe3,0x5e, 0x55,0xef, 0x3f,0xee, 0x5e,0xee, 0xe5,0xf5, 0xe5,0xee, 0xee,0xe5, 0xe5,0xee, 0xee};
Image golemLeft = Image(golemLeftData);
const uint8_t golemCorpseData[] = {8, 8, 2, 0, 0, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xff,0xfe, 0xee,0xe3, 0xf7,0xf7, 0x5e,0x5f, 0x3f,0xf5, 0x3f,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xef,0xff, 0xee,0xe5, 0x7f,0x7f, 0x3e,0x33, 0x5f,0xf3, 0xf5};
Image golemCorpse = Image(golemCorpseData);
const uint8_t punchData[] = {8, 8, 4, 0, 2, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xe7, 0xee,0xee, 0x7e,0xee, 0xe6,0x6e, 0xee,0xee, 0x67,0x76, 0xee,0xee, 0x67,0x76, 0xee,0xee, 0xe6,0x6e, 0xee,0xe7, 0xee,0xee, 0x7e,0xee, 0xee,0xee, 0xee,0x7e, 0xee,0xee, 0xe7,0xee, 0xe6,0x6e, 0xee,0xee, 0xe7,0x7e, 0xee,0xe6, 0x77,0x77, 0x6e,0xe6, 0x77,0x77, 0x6e,0xee, 0xe7,0x7e, 0xee,0xee, 0xe6,0x6e, 0xee,0x7e, 0xee,0xee, 0xe7,0xee, 0xe6,0x6e, 0xee,0xee, 0xe7,0x7e, 0xee,0xee, 0xee,0xee, 0xee,0x67, 0xee,0xee, 0x76,0x67, 0xee,0xee, 0x76,0xee, 0xee,0xee, 0xee,0xee, 0xe7,0x7e, 0xee,0xee, 0xe6,0x6e, 0xee,0xee, 0xe7,0x7e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0x7e, 0xee,0xee, 0xe7,0x7e, 0xee,0xee, 0xe7,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe7,0x7e, 0xee};
Image punch = Image(punchData);
const uint8_t dwarfRightData[] = {8, 8, 4, 0, 3, 0x0E, 1, 0xe7, 0x77,0xee, 0xee,0x70, 0xee,0xe5, 0xee,0x7e, 0x0e,0x55, 0x5e,0x7e, 0xd4,0x66, 0x64,0xee, 0x14,0x44, 0x44,0xee, 0xd1,0x44, 0x41,0xee, 0xed,0x14, 0xde,0xee, 0xed,0xee, 0xde,0xe7, 0x77,0xe5, 0xee,0x70, 0xee,0x55, 0x5e,0x7e, 0x04,0x66, 0x64,0x7e, 0xd4,0x44, 0x44,0xee, 0x1d,0x44, 0x41,0xee, 0xd1,0xd4, 0xd1,0xee, 0xed,0x1d, 0xde,0xee, 0xed,0xee, 0xde,0xe7, 0x77,0xee, 0xee,0x70, 0xee,0xe5, 0xee,0x7e, 0x0e,0x55, 0x5e,0x7e, 0xd4,0x66, 0x64,0xee, 0x14,0x44, 0x44,0xee, 0xd1,0x44, 0x41,0xee, 0xed,0x14, 0xde,0xee, 0xed,0xee, 0xde,0xee, 0xee,0xee, 0xee,0xe7, 0x77,0xe5, 0xee,0x70, 0xee,0x55, 0x5e,0x7e, 0x04,0x66, 0x64,0x7e, 0x14,0x44, 0x44,0xee, 0xd1,0x44, 0x41,0xee, 0xed,0x14, 0xde,0xee, 0xed,0xee, 0xde};
Image dwarfRight = Image(dwarfRightData);
const uint8_t dwarfLeftData[] = {8, 8, 4, 0, 3, 0x0E, 1, 0xee, 0xee,0x77, 0x7e,0xee, 0x5e,0xee, 0x07,0xe5, 0x55,0xe0, 0xe7,0x46, 0x66,0x4d, 0xe7,0x44, 0x44,0x41, 0xee,0x14, 0x44,0x1d, 0xee,0xed, 0x41,0xde, 0xee,0xed, 0xee,0xde, 0xee,0xee, 0x5e,0x77, 0x7e,0xe5, 0x55,0xee, 0x07,0x46, 0x66,0x40, 0xe7,0x44, 0x44,0x4d, 0xe7,0x14, 0x44,0xd1, 0xee,0x1d, 0x4d,0x1d, 0xee,0xed, 0xd1,0xde, 0xee,0xed, 0xee,0xde, 0xee,0xee, 0xee,0x77, 0x7e,0xee, 0x5e,0xee, 0x07,0xe5, 0x55,0xe0, 0xe7,0x46, 0x66,0x4d, 0xe7,0x44, 0x44,0x41, 0xee,0x14, 0x44,0x1d, 0xee,0xed, 0x41,0xde, 0xee,0xed, 0xee,0xde, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x5e,0x77, 0x7e,0xe5, 0x55,0xee, 0x07,0x46, 0x66,0x40, 0xe7,0x44, 0x44,0x41, 0xe7,0x14, 0x44,0x1d, 0xee,0xed, 0x41,0xde, 0xee,0xed, 0xee,0xde, 0xee};
Image dwarfLeft = Image(dwarfLeftData);
const uint8_t dwarfCorpseData[] = {8, 8, 2, 0, 0, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0x5e, 0xee,0xe7, 0x05,0x55, 0xee,0xe7, 0x46,0x66, 0x4e,0xe1, 0x44,0x44, 0x4e,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe5,0xee, 0xee,0xee, 0x55,0x50, 0x7e,0xe4, 0x66,0x64, 0x7e,0xe4, 0x44,0x44, 0x1e};
Image dwarfCorpse = Image(dwarfCorpseData);
const uint8_t bombFrogRightData[] = {8, 8, 4, 0, 3, 0x0E, 1, 0xee, 0x9e,0xee, 0xee,0xee, 0x0a,0x0e, 0xee,0xe0, 0x00,0x00, 0xee,0xe0, 0x50,0x0b, 0xbe,0xe0, 0x00,0xb7, 0x37,0xee, 0x0b,0x33, 0x3e,0xee, 0xb3,0x33, 0xee,0xee, 0xbe,0x3e, 0xee,0xee, 0x8e,0xee, 0xee,0xee, 0x09,0x0e, 0xee,0xe0, 0x00,0x00, 0xee,0xe0, 0x50,0x00, 0xee,0xe0, 0x00,0x0b, 0xbe,0xee, 0x0b,0xb7, 0x37,0xee, 0xb3,0x33, 0x3e,0xee, 0xbe,0x3e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xae,0xee, 0xee,0xee, 0x08,0x0e, 0xee,0xe0, 0x00,0x00, 0xee,0xe0, 0x50,0x0b, 0xbe,0xe0, 0x0b,0xb7, 0x37,0xee, 0xb3,0x33, 0x3e,0xee, 0xbe,0x3e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x8e,0xee, 0xee,0xee, 0x0a,0x0e, 0xee,0xe0, 0x00,0x00, 0xee,0xe0, 0x50,0x0b, 0xbe,0xe0, 0x00,0xb7, 0x37,0xee, 0x0b,0x33, 0x3e,0xee, 0xbe,0x3e, 0xee};
Image bombFrogRight = Image(bombFrogRightData);
const uint8_t bombFrogLeftData[] = {8, 8, 4, 0, 3, 0x0E, 1, 0xee, 0xee,0xe9, 0xee,0xee, 0xe0,0xa0, 0xee,0xee, 0x00,0x00, 0x0e,0xeb, 0xb0,0x05, 0x0e,0x73, 0x7b,0x00, 0x0e,0xe3, 0x33,0xb0, 0xee,0xee, 0x33,0x3b, 0xee,0xee, 0xe3,0xeb, 0xee,0xee, 0xee,0xe8, 0xee,0xee, 0xe0,0x90, 0xee,0xee, 0x00,0x00, 0x0e,0xee, 0x00,0x05, 0x0e,0xeb, 0xb0,0x00, 0x0e,0x73, 0x7b,0xb0, 0xee,0xe3, 0x33,0x3b, 0xee,0xee, 0xe3,0xeb, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xea, 0xee,0xee, 0xe0,0x80, 0xee,0xee, 0x00,0x00, 0x0e,0xeb, 0xb0,0x05, 0x0e,0x73, 0x7b,0xb0, 0x0e,0xe3, 0x33,0x3b, 0xee,0xee, 0xe3,0xeb, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xe8, 0xee,0xee, 0xe0,0xa0, 0xee,0xee, 0x00,0x00, 0x0e,0xeb, 0xb0,0x05, 0x0e,0x73, 0x7b,0x00, 0x0e,0xe3, 0x33,0xb0, 0xee,0xee, 0xe3,0xeb, 0xee};
Image bombFrogLeft = Image(bombFrogLeftData);
const uint8_t bombData[] = {8, 8, 2, 0, 1, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xe8,0xee, 0xee,0xee, 0xe0,0xa0, 0xee,0xee, 0x00,0x00, 0x0e,0xee, 0x05,0x00, 0x0e,0xee, 0x00,0x00, 0x0e,0xee, 0xe0,0x00, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xae,0xee, 0xee,0xee, 0x08,0x0e, 0xee,0xe0, 0x00,0x00, 0xee,0xe0, 0x50,0x00, 0xee,0xe0, 0x00,0x00, 0xee,0xee, 0x00,0x0e, 0xee,0xee, 0xee,0xee, 0xee};
Image bomb = Image(bombData);
const uint8_t explosionData[] = {24, 24, 5, 0, 1, 0x0E, 1, 0xee, 0xee,0xee, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0xee,0xee, 0xee,0xee, 0xe7,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x7e, 0xee,0xee, 0xe7,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x7e, 0xee,0xee, 0xe7,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x7e, 0xee,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0xee, 0xe7,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x7e, 0xee,0xee, 0xe7,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x7e, 0xee,0xee, 0xe7,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0x77,0x7e, 0xee,0xee, 0xee,0xee, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x77,0x77, 0x77,0x77, 0x77,0x77, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xee,0xee, 0xee,0xee, 0xea,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xae, 0xee,0xee, 0xea,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xae, 0xee,0xee, 0xea,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xae, 0xee,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xee, 0xea,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xae, 0xee,0xee, 0xea,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xae, 0xee,0xee, 0xea,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xae, 0xee,0xee, 0xee,0xee, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xee,0xee, 0xee,0xaa, 0xae,0xee, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xee,0xea, 0xaa,0xaa, 0xae,0xee, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xee,0xea, 0xaa,0xaa, 0xae,0xee, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xee,0xea, 0xaa,0xee, 0xea,0xaa, 0xaa,0xa9, 0x99,0x99, 0x9a,0xaa, 0xaa,0xae, 0xee,0xee, 0xea,0xaa, 0xaa,0xa9, 0x99,0x99, 0x9a,0xaa, 0xaa,0xae, 0xee,0xee, 0xea,0xaa, 0xaa,0xa9, 0x99,0x99, 0x9a,0xaa, 0xaa,0xae, 0xee,0xaa, 0xaa,0xaa, 0x99,0x9e, 0xee,0xee, 0xe9,0x99, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0x99,0x9e, 0xee,0xe5, 0xe9,0x99, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0x99,0x9e, 0xee,0x55, 0x59,0x99, 0xaa,0xaa, 0xaa,0xaa, 0xa9,0x99, 0xe5,0xee, 0xee,0xe5, 0xee,0xee, 0x99,0x9a, 0xaa,0xaa, 0xa9,0x99, 0x55,0x5e, 0xee,0xee, 0xee,0xee, 0x99,0x9a, 0xaa,0xaa, 0xa9,0x99, 0xe5,0xee, 0xee,0xee, 0xee,0xee, 0x99,0x9a, 0xaa,0xaa, 0xa9,0x99, 0xee,0xee, 0xee,0xee, 0xee,0xe5, 0x99,0x9a, 0xaa,0xaa, 0xa9,0x99, 0xee,0xee, 0xee,0xee, 0xee,0x55, 0x99,0x9a, 0xaa,0xaa, 0xa9,0x99, 0xee,0x5e, 0xee,0xee, 0xee,0xe5, 0x99,0x9a, 0xaa,0xaa, 0xaa,0xaa, 0x99,0x95, 0xee,0xe5, 0xe9,0x99, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0x99,0x9e, 0xee,0x55, 0x59,0x99, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0x99,0x9e, 0xee,0xe5, 0xe9,0x99, 0xaa,0xaa, 0xaa,0xee, 0xea,0xaa, 0xaa,0xa9, 0x99,0x99, 0x9a,0xaa, 0xaa,0xae, 0xee,0xee, 0xea,0xaa, 0xaa,0xa9, 0x99,0x99, 0x9a,0xaa, 0xaa,0xae, 0xee,0xee, 0xea,0xaa, 0xaa,0xa9, 0x99,0x99, 0x9a,0xaa, 0xaa,0xae, 0xee,0xaa, 0xae,0xee, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xee,0xea, 0xaa,0xaa, 0xae,0xee, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xee,0xea, 0xaa,0xaa, 0xae,0xee, 0xaa,0xaa, 0xaa,0xaa, 0xaa,0xaa, 0xee,0xea, 0xaa,0x99, 0x9e,0xee, 0x99,0x98, 0x88,0x88, 0x89,0x99, 0xee,0xe9, 0x99,0x99, 0x9e,0xee, 0x99,0x98, 0x88,0x88, 0x89,0x99, 0xee,0xe9, 0x99,0x99, 0x9e,0xee, 0x99,0x98, 0x88,0x88, 0x89,0x99, 0xee,0xe9, 0x99,0xee, 0xe9,0x99, 0x88,0x8e, 0xee,0xe5, 0xe8,0x88, 0x99,0x9e, 0xee,0xee, 0xe9,0x99, 0x88,0x8e, 0xee,0x55, 0x58,0x88, 0x99,0x9e, 0xee,0xee, 0xe9,0x99, 0x88,0x8e, 0xee,0xe5, 0xe8,0x88, 0x99,0x9e, 0xee,0x99, 0x98,0x88, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x88,0x89, 0x99,0x99, 0x98,0x88, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x88,0x89, 0x99,0x99, 0x98,0x88, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x88,0x89, 0x99,0x88, 0x8e,0x5e, 0xee,0xee, 0x5e,0xee, 0xee,0xee, 0xe5,0xe8, 0x88,0x88, 0x85,0x55, 0xee,0xe5, 0x55,0xee, 0xee,0xee, 0x55,0x58, 0x88,0x88, 0x8e,0x5e, 0xee,0xee, 0x5e,0xee, 0xee,0xee, 0xe5,0xe8, 0x88,0x88, 0x8e,0xee, 0xe5,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xe8, 0x88,0x88, 0x8e,0xee, 0x55,0x5e, 0xee,0xee, 0xee,0xee, 0xee,0xe8, 0x88,0x88, 0x8e,0xee, 0xe5,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xe8, 0x88,0x99, 0x98,0x88, 0xee,0xee, 0xee,0xe5, 0xee,0xee, 0x88,0x89, 0x99,0x99, 0x98,0x88, 0xee,0xee, 0xee,0x55, 0x5e,0xee, 0x88,0x89, 0x99,0x99, 0x98,0x88, 0xee,0xee, 0xee,0xe5, 0xee,0xee, 0x88,0x89, 0x99,0xee, 0xe9,0x99, 0x88,0x8e, 0x5e,0xee, 0xe8,0x88, 0x99,0x9e, 0xee,0xee, 0xe9,0x99, 0x88,0x85, 0x55,0xee, 0xe8,0x88, 0x99,0x9e, 0xee,0xee, 0xe9,0x99, 0x88,0x8e, 0x5e,0xee, 0xe8,0x88, 0x99,0x9e, 0xee,0x99, 0x9e,0xee, 0x99,0x98, 0x88,0x88, 0x89,0x99, 0xee,0xe9, 0x99,0x99, 0x9e,0xee, 0x99,0x98, 0x88,0x88, 0x89,0x99, 0xee,0xe9, 0x99,0x99, 0x9e,0xee, 0x99,0x98, 0x88,0x88, 0x89,0x99, 0xee,0xe9, 0x99,0x99, 0x9e,0xee, 0x88,0x8e, 0xee,0xee, 0xe9,0x99, 0xee,0xe9, 0x99,0x9e, 0xee,0xee, 0x88,0x8e, 0xee,0xee, 0xe9,0x99, 0xee,0xee, 0xe9,0x9e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe9,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xe5, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0x55, 0x5e,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xe5, 0xee,0xee, 0xee,0xee, 0xee,0x99, 0xee,0xee, 0xe5,0xee, 0xee,0xee, 0xee,0xee, 0xe5,0xee, 0x88,0x99, 0xee,0xee, 0x55,0x5e, 0xee,0xee, 0xee,0xee, 0x55,0x5e, 0x88,0x99, 0xee,0xee, 0xe5,0xee, 0xee,0xee, 0xee,0xee, 0xe5,0xee, 0x88,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0x5e, 0xee,0xee, 0xee,0xee, 0xee,0x5e, 0xee,0xee, 0xee,0xee, 0xe5,0x55, 0xee,0xee, 0xee,0xee, 0xe5,0x55, 0xee,0xee, 0xee,0xee, 0xee,0x5e, 0xee,0xee, 0xee,0xee, 0xee,0x5e, 0xee,0xee, 0xee,0x88, 0xee,0xee, 0xee,0xee, 0x5e,0xee, 0xee,0xee, 0xee,0xee, 0x99,0x88, 0xee,0xee, 0xee,0xe5, 0x55,0xee, 0xee,0xee, 0xee,0xee, 0x99,0x88, 0xee,0xee, 0xee,0xee, 0x5e,0xee, 0xee,0xee, 0xee,0xee, 0x99,0xee, 0xee,0x5e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe5,0xee, 0xee,0xee, 0xe5,0x55, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x55,0x5e, 0xee,0xee, 0xee,0x5e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe5,0xee, 0xee,0x9e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe9,0x9e, 0xee,0xee, 0x99,0x9e, 0xee,0xee, 0xe8,0x88, 0xee,0xee, 0xe9,0x99, 0x9e,0xee, 0x99,0x9e, 0xee,0xee, 0xe8,0x88, 0xee,0xe9, 0x99};
Image explosion = Image(explosionData);
const uint8_t mineSkeletonRightData[] = {8, 8, 4, 0, 2, 0x0E, 1, 0xee, 0xe7,0x77, 0x7e,0xee, 0xe7,0x87, 0x8e,0xee, 0xe7,0x77, 0x7e,0xee, 0x22,0x77, 0xee,0xe5, 0x22,0x22, 0x5e,0xe0, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0xee,0xee, 0x1e,0xe1, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe7,0x77, 0x7e,0xee, 0xe7,0x87, 0x8e,0xee, 0x27,0x77, 0x7e,0xe5, 0x22,0x77, 0x5e,0xe0, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0xee,0xee, 0x1e,0xe1, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe7,0x77, 0x7e,0xee, 0x27,0x77, 0x7e,0xe5, 0x27,0x87, 0x8e,0xe0, 0x00,0x77, 0x0e,0xee, 0x00,0x00, 0xee,0xee, 0x1e,0xe1, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe7,0x77, 0x7e,0xee, 0xe7,0x77, 0x7e,0xee, 0x27,0x87, 0x8e,0xe5, 0x22,0x77, 0x5e,0xe0, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0xee,0xee, 0x1e,0xe1, 0xee};
Image mineSkeletonRight = Image(mineSkeletonRightData);
const uint8_t mineSkeletonLeftData[] = {8, 8, 4, 0, 2, 0x0E, 1, 0xe7, 0x77,0x7e, 0xee,0xe8, 0x78,0x7e, 0xee,0xe7, 0x77,0x7e, 0xee,0xee, 0x77,0x22, 0xee,0xe5, 0x22,0x22, 0x5e,0xe0, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0xee,0xee, 0x1e,0xe1, 0xee,0xee, 0xee,0xee, 0xee,0xe7, 0x77,0x7e, 0xee,0xe8, 0x78,0x7e, 0xee,0xe7, 0x77,0x72, 0xee,0xe5, 0x77,0x22, 0x5e,0xe0, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0xee,0xee, 0x1e,0xe1, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xe7, 0x77,0x7e, 0xee,0xe7, 0x77,0x72, 0xee,0xe8, 0x78,0x72, 0x5e,0xe0, 0x77,0x00, 0x0e,0xee, 0x00,0x00, 0xee,0xee, 0x1e,0xe1, 0xee,0xee, 0xee,0xee, 0xee,0xe7, 0x77,0x7e, 0xee,0xe7, 0x77,0x7e, 0xee,0xe8, 0x78,0x72, 0xee,0xe5, 0x77,0x22, 0x5e,0xe0, 0x00,0x00, 0x0e,0xee, 0x00,0x00, 0xee,0xee, 0x1e,0xe1, 0xee};
Image mineSkeletonLeft = Image(mineSkeletonLeftData);
const uint8_t skeletonStunnedRightData[] = {8, 8, 2, 0, 3, 0x0E, 1, 0xee, 0xea,0xea, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xea,0xea, 0xee,0xee, 0xe7,0x77, 0x7e,0xee, 0xe7,0x77, 0x7e,0xe5, 0x27,0xc7, 0xce,0xe0, 0x00,0x77, 0x0e,0x6e, 0x00,0x00, 0xe6,0xee, 0xee,0xae, 0xee,0xee, 0xae,0xee, 0xae,0xee, 0xee,0xae, 0xee,0xee, 0xe7,0x77, 0x7e,0xee, 0xe7,0x77, 0x7e,0xe5, 0x27,0xc7, 0xce,0xe0, 0x00,0x77, 0x0e,0x6e, 0x00,0x00, 0xe6};
Image skeletonStunnedRight = Image(skeletonStunnedRightData);
const uint8_t skeletonStunnedLeftData[] = {8, 8, 2, 0, 3, 0x0E, 1, 0xee, 0xae,0xae, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xae,0xae, 0xee,0xe7, 0x77,0x7e, 0xee,0xe7, 0x77,0x7e, 0xee,0xec, 0x7c,0x72, 0x5e,0xe0, 0x77,0x00, 0x0e,0x6e, 0x00,0x00, 0xe6,0xee, 0xea,0xee, 0xee,0xea, 0xee,0xea, 0xee,0xee, 0xea,0xee, 0xee,0xe7, 0x77,0x7e, 0xee,0xe7, 0x77,0x7e, 0xee,0xec, 0x7c,0x72, 0x5e,0xe0, 0x77,0x00, 0x0e,0x6e, 0x00,0x00, 0xe6};
Image skeletonStunnedLeft = Image(skeletonStunnedLeftData);
const uint8_t mineSkeletonCorpseData[] = {8, 8, 2, 0, 0, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x1e,0xe1, 0xee,0xee, 0x07,0x77, 0x7e,0xe0, 0x07,0x87, 0x8e,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x1e,0xe1, 0xee,0xe7, 0x77,0x70, 0xee,0xe8, 0x78,0x70, 0x0e};
Image mineSkeletonCorpse = Image(mineSkeletonCorpseData);
const uint8_t dwarfWarriorRightData[] = {8, 9, 4, 0, 3, 0x0E, 1, 0x7e, 0x7e,0xee, 0xee,0x77, 0x7e,0xee, 0xee,0x70, 0x7e,0xe5, 0xee,0xe0, 0xee,0x55, 0x5e,0xe6, 0x89,0x66, 0x69,0xee, 0x29,0x99, 0x99,0xee, 0x82,0x99, 0x92,0xee, 0xe8,0x29, 0x8e,0xee, 0xe8,0xee, 0x8e,0x7e, 0x7e,0xee, 0xee,0x77, 0x7e,0xe5, 0xee,0x70, 0x7e,0x55, 0x5e,0xe0, 0xe9,0x66, 0x69,0xe6, 0x89,0x99, 0x99,0xee, 0x28,0x99, 0x92,0xee, 0x82,0x89, 0x82,0xee, 0xe8,0x28, 0x8e,0xee, 0xe8,0xee, 0x8e,0x7e, 0x7e,0xee, 0xee,0x77, 0x7e,0xee, 0xee,0x70, 0x7e,0xe5, 0xee,0xe0, 0xee,0x55, 0x5e,0xe6, 0x89,0x66, 0x69,0xee, 0x29,0x99, 0x99,0xee, 0x82,0x99, 0x92,0xee, 0xe8,0x29, 0x8e,0xee, 0xe8,0xee, 0x8e,0xee, 0xee,0xee, 0xee,0x7e, 0x7e,0xee, 0xee,0x77, 0x7e,0xe5, 0xee,0x70, 0x7e,0x55, 0x5e,0xe0, 0x89,0x66, 0x69,0xe6, 0x29,0x99, 0x99,0xee, 0x82,0x99, 0x92,0xee, 0xe8,0x29, 0x8e,0xee, 0xe8,0xee, 0x8e};
Image dwarfWarriorRight = Image(dwarfWarriorRightData);
const uint8_t dwarfWarriorLeftData[] = {8, 9, 4, 0, 3, 0x0E, 1, 0xee, 0xee,0xe7, 0xe7,0xee, 0xee,0xe7, 0x77,0xee, 0x5e,0xe7, 0x07,0xe5, 0x55,0xee, 0x0e,0x96, 0x66,0x98, 0x6e,0x99, 0x99,0x92, 0xee,0x29, 0x99,0x28, 0xee,0xe8, 0x92,0x8e, 0xee,0xe8, 0xee,0x8e, 0xee,0xee, 0xee,0xe7, 0xe7,0xee, 0x5e,0xe7, 0x77,0xe5, 0x55,0xe7, 0x07,0x96, 0x66,0x9e, 0x0e,0x99, 0x99,0x98, 0x6e,0x29, 0x99,0x82, 0xee,0x28, 0x98,0x28, 0xee,0xe8, 0x82,0x8e, 0xee,0xe8, 0xee,0x8e, 0xee,0xee, 0xee,0xe7, 0xe7,0xee, 0xee,0xe7, 0x77,0xee, 0x5e,0xe7, 0x07,0xe5, 0x55,0xee, 0x0e,0x96, 0x66,0x98, 0x6e,0x99, 0x99,0x92, 0xee,0x29, 0x99,0x28, 0xee,0xe8, 0x92,0x8e, 0xee,0xe8, 0xee,0x8e, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xe7, 0xe7,0xee, 0x5e,0xe7, 0x77,0xe5, 0x55,0xe7, 0x07,0x96, 0x66,0x98, 0x0e,0x99, 0x99,0x92, 0x6e,0x29, 0x99,0x28, 0xee,0xe8, 0x92,0x8e, 0xee,0xe8, 0xee,0x8e, 0xee};
Image dwarfWarriorLeft = Image(dwarfWarriorLeftData);
const uint8_t dwarfWarriorCorpseData[] = {8, 8, 2, 0, 0, 0x0E, 1, 0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0x7e,0x5e, 0xee,0xe0, 0x75,0x55, 0xee,0xe0, 0x96,0x66, 0x9e,0xe8, 0x99,0x99, 0x9e,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xee,0xee, 0xe5,0xe7, 0xee,0xee, 0x55,0x57, 0x0e,0xe9, 0x66,0x69, 0x0e,0xe9, 0x99,0x99, 0x8e};
Image dwarfWarriorCorpse = Image(dwarfWarriorCorpseData);
const uint8_t bombGoblinRightData[] = {8, 9, 4, 0, 3, 0x0C, 1, 0xcc, 0x2c,0x2c, 0xcc,0xc0, 0x27,0x27, 0xcc,0x00, 0x22,0x2c, 0xcc,0x0e, 0x42,0xcc, 0xcc,0x44, 0xe2,0xee, 0xcc,0x44, 0x22,0xcc, 0xec,0xc4, 0x22,0x2c, 0xcc,0xcc, 0x2c,0x2c, 0xcc,0xc2, 0xcc,0xc2, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0x2c,0x2c, 0xcc,0xc0, 0x27,0x27, 0xcc,0x00, 0x22,0x2c, 0xcc,0x0e, 0x42,0xcc, 0xcc,0x44, 0xe2,0xee, 0xcc,0xc4, 0x22,0x2c, 0xec,0xcc, 0x2c,0x2c, 0xcc,0xc2, 0xcc,0xc2, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0x2c,0x2c, 0xcc,0xc0, 0x27,0x27, 0xcc,0x00, 0x22,0x2c, 0xcc,0x0e, 0x42,0xcc, 0xec,0x44, 0xe2,0xee, 0xcc,0xc4, 0x22,0x2c, 0xcc,0xcc, 0x2c,0x2c, 0xcc,0xc2, 0xcc,0xc2, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0x2c,0x2c, 0xcc,0xc0, 0x27,0x27, 0xcc,0x00, 0x22,0x2c, 0xcc,0x0e, 0x42,0xcc, 0xcc,0x44, 0xe2,0xee, 0xcc,0xc4, 0x22,0x2c, 0xec,0xcc, 0x2c,0x2c, 0xcc,0xc2, 0xcc,0xc2, 0xcc};
Image bombGoblinRight = Image(bombGoblinRightData);
const uint8_t bombGoblinLeftData[] = {8, 9, 4, 0, 3, 0x0C, 1, 0xcc, 0xc2,0xc2, 0xcc,0xcc, 0x72,0x72, 0x0c,0xcc, 0xc2,0x22, 0x00,0xcc, 0xcc,0x24, 0xe0,0xcc, 0xee,0x2e, 0x44,0xce, 0xcc,0x22, 0x44,0xcc, 0xc2,0x22, 0x4c,0xcc, 0xc2,0xc2, 0xcc,0xcc, 0x2c,0xcc, 0x2c,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xc2,0xc2, 0xcc,0xcc, 0x72,0x72, 0x0c,0xcc, 0xc2,0x22, 0x00,0xcc, 0xcc,0x24, 0xe0,0xcc, 0xee,0x2e, 0x44,0xce, 0xc2,0x22, 0x4c,0xcc, 0xc2,0xc2, 0xcc,0xcc, 0x2c,0xcc, 0x2c,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xc2,0xc2, 0xcc,0xcc, 0x72,0x72, 0x0c,0xcc, 0xc2,0x22, 0x00,0xce, 0xcc,0x24, 0xe0,0xcc, 0xee,0x2e, 0x44,0xcc, 0xc2,0x22, 0x4c,0xcc, 0xc2,0xc2, 0xcc,0xcc, 0x2c,0xcc, 0x2c,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xc2,0xc2, 0xcc,0xcc, 0x72,0x72, 0x0c,0xcc, 0xc2,0x22, 0x00,0xcc, 0xcc,0x24, 0xe0,0xcc, 0xee,0x2e, 0x44,0xce, 0xc2,0x22, 0x4c,0xcc, 0xc2,0xc2, 0xcc,0xcc, 0x2c,0xcc, 0x2c};
Image bombGoblinLeft = Image(bombGoblinLeftData);
const uint8_t bombGoblinFusedRightData[] = {8, 9, 4, 0, 3, 0x0C, 1, 0xca, 0x00,0x0c, 0xcc,0x80, 0x00,0x00, 0xcc,0xee, 0x00,0x0e, 0xec,0xe0, 0x00,0x50, 0xec,0xce, 0x00,0x0e, 0xcc,0xcc, 0x22,0xcc, 0xcc,0xcc, 0x22,0x2c, 0xcc,0xcc, 0x2c,0xc2, 0xcc,0xc2, 0xcc,0xc2, 0xcc,0xcc, 0x2c,0x2c, 0xcc,0x8a, 0x00,0x0c, 0xcc,0xc0, 0x00,0x00, 0xcc,0xee, 0x00,0x0e, 0xec,0xe0, 0x00,0x50, 0xec,0xcc, 0x00,0x0c, 0xcc,0xcc, 0x22,0x2c, 0xcc,0xcc, 0x2c,0xc2, 0xcc,0xc2, 0xcc,0xc2, 0xcc,0xcc, 0x2c,0x2c, 0xcc,0xcc, 0x27,0x27, 0xcc,0x8c, 0x22,0x2c, 0xcc,0xca, 0x00,0x0c, 0xcc,0xe0, 0x00,0x00, 0xec,0xee, 0x00,0x0e, 0xec,0xc0, 0x00,0x50, 0xcc,0xcc, 0x00,0x02, 0xcc,0xc2, 0xcc,0xc2, 0xcc,0xcc, 0x2c,0x2c, 0xcc,0x8a, 0x00,0x0c, 0xcc,0xc0, 0x00,0x00, 0xcc,0xee, 0x00,0x0e, 0xec,0xe0, 0x00,0x50, 0xec,0xcc, 0x00,0x0c, 0xcc,0xcc, 0x22,0x2c, 0xcc,0xcc, 0x2c,0xc2, 0xcc,0xc2, 0xcc,0xc2, 0xcc};
Image bombGoblinFusedRight = Image(bombGoblinFusedRightData);
const uint8_t bombGoblinFusedLeftData[] = {8, 9, 4, 0, 3, 0x0C, 1, 0xcc, 0xc0,0x00, 0xac,0xcc, 0x00,0x00, 0x08,0xce, 0xe0,0x00, 0xee,0xce, 0x05,0x00, 0x0e,0xcc, 0xe0,0x00, 0xec,0xcc, 0xcc,0x22, 0xcc,0xcc, 0xc2,0x22, 0xcc,0xcc, 0x2c,0xc2, 0xcc,0xcc, 0x2c,0xcc, 0x2c,0xcc, 0xc2,0xc2, 0xcc,0xcc, 0xc0,0x00, 0xa8,0xcc, 0x00,0x00, 0x0c,0xce, 0xe0,0x00, 0xee,0xce, 0x05,0x00, 0x0e,0xcc, 0xc0,0x00, 0xcc,0xcc, 0xc2,0x22, 0xcc,0xcc, 0x2c,0xc2, 0xcc,0xcc, 0x2c,0xcc, 0x2c,0xcc, 0xc2,0xc2, 0xcc,0xcc, 0x72,0x72, 0xcc,0xcc, 0xc2,0x22, 0xc8,0xcc, 0xc0,0x00, 0xac,0xce, 0x00,0x00, 0x0e,0xce, 0xe0,0x00, 0xee,0xcc, 0x05,0x00, 0x0c,0xcc, 0x20,0x00, 0xcc,0xcc, 0x2c,0xcc, 0x2c,0xcc, 0xc2,0xc2, 0xcc,0xcc, 0xc0,0x00, 0xa8,0xcc, 0x00,0x00, 0x0c,0xce, 0xe0,0x00, 0xee,0xce, 0x05,0x00, 0x0e,0xcc, 0xc0,0x00, 0xcc,0xcc, 0xc2,0x22, 0xcc,0xcc, 0x2c,0xc2, 0xcc,0xcc, 0x2c,0xcc, 0x2c};
Image bombGoblinFusedLeft = Image(bombGoblinFusedLeftData);
const uint8_t bombGoblinStunnedData[] = {8, 9, 2, 0, 3, 0x0C, 1, 0xcc, 0xca,0xcc, 0xcc,0xca, 0xcc,0xca, 0xcc,0xcc, 0xca,0xcc, 0xcc,0xcc, 0x2c,0x2c, 0xcc,0xcc, 0x22,0x2c, 0xcc,0xce, 0x72,0x7e, 0xcc,0xce, 0x22,0x2e, 0xcc,0xcc, 0xe2,0xec, 0xcc,0xce, 0x22,0x22, 0xec,0xcc, 0xac,0xac, 0xcc,0xcc, 0xcc,0xcc, 0xcc,0xcc, 0xac,0xac, 0xcc,0xcc, 0x2c,0x2c, 0xcc,0xcc, 0x22,0x2c, 0xcc,0xce, 0x72,0x7e, 0xcc,0xce, 0x22,0x2e, 0xcc,0xcc, 0xe2,0xec, 0xcc,0xce, 0x22,0x22, 0xec};
Image bombGoblinStunned = Image(bombGoblinStunnedData);

Character::Character() {}

Character::Character(byte _posX, byte _posY, byte _moveDelay, byte _baseHp) {
  this->posX = _posX;
  this->posY = _posY;
  this->moveDelay = _moveDelay;
  this->moveCounter = _moveDelay;
  this->isAlive = true;
  this->baseHp = _baseHp;
  this->currentHp = _baseHp;
  this->moveDir = _right;
  this->hasLoot = false;
  this->gold = 1;
}

void Character::setPosition(byte x, byte y) {
  world.world[posX][posY] = world.world[posX][posY] - 3;
  posX = x;
  posY = y;
  world.world[posX][posY] = world.world[posX][posY] + 3;
}

void Character::draw(int x, int y) { }

void Character::takeDamage(byte dmg) {
  if(random(0, 2)) soundManager.playFX(ENEMY_HIT);
  else soundManager.playFX(ENEMY_HIT2);
  camera.shakeScreen(4);

  if (subtractHp(dmg)) {
    currentHp = subtractHp(dmg);
  } else {
    currentHp = 0;
    isAlive = false;
    gold = gold * player.combo;
    hasLoot = true;
    world.enemyCount--;
    world.world[posX][posY] = world.world[posX][posY] - 3;
    player.increaseCombo();

    if (player.bloodlust && player.currentHp < player.baseHp && random(0, 12) == 0) {
      player.currentHp++;
      soundManager.playFX(HEART);
    }

    if (world.enemyCount == 0) {
      soundManager.playFX(PORTAL_OPENED);
    }
  }
}

void Character::changeDirection(short dir) {
  if (dir == 0) return;
  
  this->moveDir = dir;
}

byte Character::getTurnCounter() {
  return moveDelay;
}

void Character::pickLoot() {
  hasLoot = false;
  player.gold += this->gold;
  soundManager.playFX(COIN);
}

void Character::drawLoot(byte x, byte y) {
  if (hasLoot) {
    gb.display.drawImage(x, y-3, coin);
  }
}

void Character::takeAction(byte x, byte y) { }

bool Character::doesCollideWithWall(byte x, byte y) {
  byte newX = posX + x;
  byte newY = posY + y;
  
  return world.world[newX][newY] != 2;
}

void Character::defaultAction(Vec dir, int damage) {
  if (dir.x == player.posX && dir.y == player.posY) {
    player.takeDamage(damage);
  } else {
    setPosition(dir.x, dir.y);
  }
}

Vec Character::getDirection() {
  byte counter = 0;
  Vec possibleDirs[4];
  
  for (byte i = 0; i < sizeof(directions)/sizeof(directions[0]); ++i) {
    Vec dir = directions[i];
    
    if (!this->doesCollideWithWall(dir.x, dir.y)) {
      possibleDirs[counter] = dir;
      counter++;
    }
  }

  if (counter == 0) return Vec(99, 99);
  
  return possibleDirs[random(counter)];
}

byte Character::subtractHp(byte value) {
  return byte(currentHp - value) < currentHp ? byte(currentHp - value) : 0;
}

Player::Player() { }

Player::Player(byte _posX, byte _posY)
  : Character(_posX, _posY, 0, 3) {}

void Player::init() {
  this->attackAnimationTime = 0;
  this->hitAnimationTime = 0;
  this->digAnimationTime = 0;
  this->moveDelay = 1;
  this->moveCounter = 0;
  this->isAlive = true;
  this->baseHp = 4;
  this->currentHp = 4;
  this->gold = 0;
  this->dmg = 1;
  this->armor = 0;
  this->bloodlust = false;
  this->stress = false;
  this->godsGrace = false;
  this->comboGod = false;
  this->longArms = false;
  this->shovel = false;
  this->resetCombo();
}

void Player::setPosition(byte x, byte y) {
  posX = x;
  posY = y;
}

void Player::takeAction(byte x, byte y) {
  posX += x;
  posY += y;
}

void Player::takeDamage(byte dmg) {
  soundManager.playFX(PLAYER_HIT);
  camera.shakeScreen(4);
  dmg = dmg-armor >= 1 ? dmg-armor : 1;

  if (subtractHp(dmg)) {
    currentHp = subtractHp(dmg);
    hitAnimationTime = 6;
    resetCombo();
  } else {
    if (godsGrace) {
      currentHp = baseHp;
      godsGrace = false;
    } else {
      currentHp = 0;
      isAlive = false;
    }
  }
}

void Player::heal(byte amount) {
  if (baseHp-currentHp >= amount) currentHp += amount;
  else currentHp = baseHp;
}

void Player::draw(int x, int y) {
  if (this->moveDir == _right) {
    if (isAlive) {
      gb.display.drawImage(x, y-4, playerSpriteRight);
    } else {
      playerCorpse.setFrame(0);
      gb.display.drawImage(x, y-3, playerCorpse);
    }
  } else {
    if (isAlive) {
      gb.display.drawImage(x, y-4, playerSpriteLeft);
    } else {
      playerCorpse.setFrame(1);
      gb.display.drawImage(x, y-3, playerCorpse);
    }
  }

  if (attackAnimationTime > 0) {
    attackAnimationTime--;
    gb.lights.fill(gb.display.getPalette()[comboColor]);
    gb.display.drawImage(attackPos.x, attackPos.y-2, slash);
  } 
  if (hitAnimationTime > 0) {
    hitAnimationTime--;
    gb.lights.fill(RED);
    gb.display.drawImage(camera.screenPosX(posX), camera.screenPosY(posY)-2, bloodSlash);
  }
  if(digAnimationTime > 0) {
    digAnimationTime--;
    gb.lights.fill(GREEN);
    gb.display.drawImage(attackPos.x, attackPos.y-2, punch);
  }
  if (attackAnimationTime == 0 && hitAnimationTime == 0) {
    gb.lights.fill(BLACK);
  }
}

void Player::drawGui() {
  gb.display.setColor(RED);
  
  for (byte i = 0; i < currentHp-1; i+=2) {
    gb.display.drawImage((i/2)+6*(i/2), 0, heartGui); 
  }

  for (byte i = currentHp; i < baseHp; i+=2) {
    gb.display.drawImage((i/2)+6*(i/2), 0, heartEmptyGui); 
  }
  
  if (currentHp%2 != 0) {
    gb.display.drawImage(6*(currentHp/2)+(currentHp/2), 0, heartEmptyGui); 
    gb.display.drawImage(6*(currentHp/2)+(currentHp/2), 0, heartGui, 0, 0, 4, 8); 
  }
  
  gb.display.drawImage(0, 56, coinGui);
  gb.display.setColor(WHITE);
  gb.display.setCursor(8, 57);
  gb.display.print(gold); 

  if (combo > 1) {
    gb.display.setCursor(68, 57);
    gb.display.setColor(gb.display.getPalette()[comboColor]);
    gb.display.printf("%dx", combo); 
  }
}

bool Player::doesCollideWithWall(byte x, byte y) {
  byte newX = posX + x;
  byte newY = posY + y;
  
  return world.world[newX][newY] == 1 || world.world[newX][newY] == 4;
}

byte Player::calculateDmg() {
  byte damage = this->dmg;

  if (stress && currentHp <= 2) damage+=2;
  if (comboGod && combo >= 3) damage++;

  return damage;
}

void Player::increaseCombo() {
  comboCounter++;

  if (comboCounter >= 2 && comboCounter < 6) {
    combo = 2;
  } else if (comboCounter >= 6) {
    combo = 3;
  }
}

void Player::resetCombo() {
  combo = 1;
  comboCounter = 0;
  comboColor = 1;
}

void Player::changeComboColor() {
  comboColor++;
  if (comboColor > 15) comboColor = 1;
}

Chest::Chest(byte _posX, byte _posY) : Character(_posX, _posY, 255, 1) {
  content = 0;
  hasLoot = false;
  
  if (player.currentHp < player.baseHp) {
    byte rnd = random(0, 3);
    if(rnd == 0) {
      content = 1;
    }
  }
  gold = random(5+world.currentWorld*2, 10+world.currentWorld*4);
}

void Chest::draw(int x, int y) {
  if (isAlive) {
    chest.setFrame(0);
  } else {
    chest.setFrame(1);
  }
  gb.display.drawImage(x, y-2, chest);

  if (hasLoot) {
    if (content == 1) {
      gb.display.drawImage(x-1, y-3, heart);
    } else {
      gb.display.drawImage(x, y-3, coin);
    }
  }
}

void Chest::takeDamage(byte dmg) {
  currentHp = 0;
  isAlive = false;
  hasLoot = true;
  gold = gold * player.combo;
  world.world[posX][posY] = world.world[posX][posY] - 3;
}

void Chest::pickLoot() {
  hasLoot = false;
  if (content == 1 && player.currentHp < player.baseHp) {
    player.heal(2);
    soundManager.playFX(HEART);
  } else {
    player.gold += this->gold;
    soundManager.playFX(COIN);
  }
}

Enemy::Enemy(byte _posX, byte _posY, byte _baseHp)
  : Character(_posX, _posY, 2, _baseHp) { }

void Enemy::draw(int x, int y) {
  if (this->moveDir == _right) {
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-2, enemySprRight);
    } else {
      enemyCorpse.setFrame(0);
      gb.display.drawImage(x, y-2, enemyCorpse);
    }
  } else {    
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-2, enemySprLeft);
    } else {
      enemyCorpse.setFrame(1);
      gb.display.drawImage(x, y-2, enemyCorpse);
    }
  }
  drawLoot(x, y);
}
  
void Enemy::takeAction(byte x, byte y) {
  if(!isAlive) return;

  Vec dir = astar.getNextTile(Vec(posX, posY), Vec(player.posX, player.posY), false);

  if (dir.x == 99 && dir.y == 99) return;

  this->changeDirection(dir.x-posX);
  this->defaultAction(dir, 1);
}

Goblin::Goblin(byte _posX, byte _posY, byte _baseHp)
  : Enemy(_posX, _posY, _baseHp) { }

void Goblin::draw(int x, int y) {
  if (this->moveDir == _right) {
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-2, goblinRight);
    } else {
      goblinCorpse.setFrame(0);
      gb.display.drawImage(x, y-2, goblinCorpse);
    }
  } else {    
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-2, goblinLeft);
    } else {
      goblinCorpse.setFrame(1);
      gb.display.drawImage(x, y-2, goblinCorpse);
    }
  }
  drawLoot(x, y);
}

Skull::Skull(byte _posX, byte _posY, byte _baseHp)
  : Character(_posX, _posY, 2, _baseHp) { }

void Skull::draw(int x, int y) {
  if (this->moveDir == _right) {
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-2, skullRight);
    } else {
      skullCorpse.setFrame(0);
      gb.display.drawImage(x, y-2, skullCorpse);
    }
  } else {    
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-2, skullLeft);
    } else {
      skullCorpse.setFrame(1);
      gb.display.drawImage(x, y-2, skullCorpse);
    }
  }
  drawLoot(x, y);
}
  
void Skull::takeAction(byte x, byte y) {
  if(!isAlive) return;

  Vec dir = getDirection();
  if (dir.x == 99 && dir.y == 99) return;

  this->changeDirection(dir.x);
  this->defaultAction(Vec(posX + dir.x, posY + dir.y), 1);
}

BloodSkull::BloodSkull(byte _posX, byte _posY, byte _baseHp)
  : Skull(_posX, _posY, _baseHp) {
  this->moveDelay = 1;    
}

void BloodSkull::draw(int x, int y) {
  if (this->moveDir == _right) {
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-2, bloodskullRight);
    } else {
      bloodskullCorpse.setFrame(0);
      gb.display.drawImage(x, y-2, bloodskullCorpse);
    }
  } else {    
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-2, bloodskullLeft);
    } else {
      bloodskullCorpse.setFrame(1);
      gb.display.drawImage(x, y-2, bloodskullCorpse);
    }
  }
  drawLoot(x, y);
}

Ghost::Ghost(byte _posX, byte _posY, byte _baseHp)
  : Enemy(_posX, _posY, _baseHp) { }

void Ghost::draw(int x, int y) {
  if (this->moveDir == _right) {
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-2, ghostRight);
    } else {
      ghostCorpse.setFrame(0);
      gb.display.drawImage(x, y-2, ghostCorpse);
    }
  } else {    
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-2, ghostLeft);
    } else {
      ghostCorpse.setFrame(1);
      gb.display.drawImage(x, y-2, ghostCorpse);
    }
  }
  drawLoot(x, y);
}
  
void Ghost::takeAction(byte x, byte y) {
  if(!isAlive) return;

  Vec newPos = astar.getNextTile(Vec(posX, posY), Vec(player.posX, player.posY), true);

  if (newPos.x == 99 && newPos.y == 99) return;

  this->changeDirection(newPos.x-posX);
  this->defaultAction(newPos, 1);
}

Rat::Rat(byte _posX, byte _posY, byte _baseHp)
  : Character(_posX, _posY, 2, _baseHp) {
    currentDir = getDirection();
    changeDirection(currentDir.x);
  }

void Rat::draw(int x, int y) {
  if (this->moveDir == _right) {
    if(this->isAlive) {
      gb.display.drawImage(x, y-2, ratRight);
    } else {
      ratCorpse.setFrame(0);
      gb.display.drawImage(x, y-2, ratCorpse);
    }
  } else {    
    if(this->isAlive) {
      gb.display.drawImage(x, y-2, ratLeft);
    } else {
      ratCorpse.setFrame(1);
      gb.display.drawImage(x, y-2, ratCorpse);
    }
  }
  drawLoot(x, y);
}
  
void Rat::takeAction(byte x, byte y) {
  if (!isAlive) return;
  if ((currentDir.x == 99 && currentDir.y == 99) || doesCollideWithWall(currentDir.x, currentDir.y)) {
    currentDir = getDirection();
    this->changeDirection(currentDir.x);
    return;
  }

  this->defaultAction(Vec(posX + currentDir.x, posY + currentDir.y), 1);
}

Necromancer::Necromancer(byte _posX, byte _posY, byte _baseHp)
  : Character(_posX, _posY, 1, _baseHp) { 
  charge = false;
  chargeAnim = 0;
  gold = 10;
}

void Necromancer::drawLaser() {
  if (chargeAnim > 0) {
    chargeAnim--;
    for (short i = posX + moveDir; ;i+=moveDir) {
      gb.display.drawImage(camera.screenPosX(i), camera.screenPosY(posY), fireball);
      if (i < 0 || i >= world_size) break;
      if (world.world[i][posY] == 1 || world.world[i][posY] == 4) break;
    }
  }
}

void Necromancer::draw(int x, int y) {
  if (this->moveDir == _right) {
    if(this->isAlive) {
      if (!charge) gb.display.drawImage(x, y-3, necromancerIdleRight);
      else gb.display.drawImage(x, y-3, necromancerChargeRight);
    } else {
      enemyCorpse.setFrame(0);
      gb.display.drawImage(x, y-2, enemyCorpse);
    }
  } else {    
    if(this->isAlive) {
      if (!charge) gb.display.drawImage(x, y-3, necromancerIdleLeft);
      else gb.display.drawImage(x, y-3, necromancerChargeLeft);
    } else {
      enemyCorpse.setFrame(1);
      gb.display.drawImage(x, y-2, enemyCorpse);
    }
  }
  drawLaser();
  drawLoot(x, y);
}
  
void Necromancer::takeAction(byte x, byte y) {
  if(!isAlive) return;
  if (charge) {
    for (short i = posX + moveDir; ;i+=moveDir) {
      if (i < 0 || i >= world_size) break;
      if (world.isWall(i, posY)) break;
      if (i == player.posX && posY == player.posY) {
         player.takeDamage(2);
         break;
      }
    }
    charge = false;
    chargeAnim = 4;
    return;
  }
  
  Vec newPos = astar.getNextTile(Vec(posX, posY), Vec(player.posX, player.posY), false);

  if (newPos.x == 99 && newPos.y == 99) return;
  this->changeDirection(newPos.x-posX);
  if (posY == player.posY && camera.isInBounds(posX, posY)) {
    charge = true;
    return;
  }
  
  this->defaultAction(newPos, 1);
}

Golem::Golem(byte _posX, byte _posY, byte _baseHp)
  : Character(_posX, _posY, 4, _baseHp) {
    punchAnimationTime = 0;
    gold = 3;
  }

void Golem::draw(int x, int y) {
  if (this->moveDir == _right) {
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-4, golemRight);
    } else {
      golemCorpse.setFrame(0);
      gb.display.drawImage(x, y-3, golemCorpse);
    }
  } else {    
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-4, golemLeft);
    } else {
      golemCorpse.setFrame(1);
      gb.display.drawImage(x, y-3, golemCorpse);
    }
  }
  if (punchAnimationTime > 0) {
    punchAnimationTime--;
    gb.display.drawImage(x+(attackDir.x*sprite_size), y+(attackDir.y*sprite_size)-2, punch);
  } 
  drawLoot(x, y);
}
  
void Golem::takeAction(byte x, byte y) {
  if(!isAlive) return;

  Vec nextPos = astar.getNextTile(Vec(posX, posY), Vec(player.posX, player.posY), false);
  attackDir = Vec(nextPos.x-posX, nextPos.y-posY);

  if (nextPos.x == 99 && nextPos.y == 99) return;

  this->changeDirection(nextPos.x-posX);
  if (world.world[nextPos.x + attackDir.x][nextPos.y + attackDir.y] != wall) {
    this->punchAnimationTime = 8;
  }

  if (nextPos.x == player.posX && nextPos.y == player.posY) {
    player.takeDamage(3);
  } else if (nextPos.x+attackDir.x == player.posX && nextPos.y+attackDir.y == player.posY) {
    player.takeDamage(3);
    setPosition(nextPos.x, nextPos.y);
  } else {
    setPosition(nextPos.x, nextPos.y);
  }
}

Dwarf::Dwarf(byte _posX, byte _posY, byte _baseHp)
  : Character(_posX, _posY, 2, _baseHp) {
    digAnimationTime = 0;
    gold = 2;
    moveAfterDig = false;
  }

void Dwarf::draw(int x, int y) {
  if (this->moveDir == _right) {
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-3, dwarfRight);
    } else {
      dwarfCorpse.setFrame(0);
      gb.display.drawImage(x, y-2, dwarfCorpse);
    }
  } else {    
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-3, dwarfLeft);
    } else {
      dwarfCorpse.setFrame(1);
      gb.display.drawImage(x, y-2, dwarfCorpse);
    }
  }
  if (digAnimationTime > 0) {
    digAnimationTime--;
    gb.display.drawImage(x+(attackDir.x*sprite_size), y+(attackDir.y*sprite_size)-2, punch);
  } 
  drawLoot(x, y);
}
  
void Dwarf::takeAction(byte x, byte y) {
  if(!isAlive) return;

  Vec nextPos = astar.getNextTile(Vec(posX, posY), Vec(player.posX, player.posY), true);
  attackDir = Vec(nextPos.x-posX, nextPos.y-posY);

  if (nextPos.x == 99 && nextPos.y == 99) return;

  this->changeDirection(nextPos.x-posX);

  if (nextPos.x == player.posX && nextPos.y == player.posY) {
    player.takeDamage(2);
  } else if (world.isInBounds(nextPos.x, nextPos.y) && world.isWall(nextPos.x, nextPos.y)) {
    digAnimationTime = 8;
    world.world[nextPos.x][nextPos.y] = surface;
    if (moveAfterDig) setPosition(nextPos.x, nextPos.y);
  } else {
    setPosition(nextPos.x, nextPos.y);
  }
}

DwarfWarrior::DwarfWarrior(byte _posX, byte _posY, byte _baseHp)
  : Dwarf(_posX, _posY, _baseHp) {
    gold = 3;
    moveAfterDig = true;
  }

void DwarfWarrior::draw(int x, int y) {
  if (this->moveDir == _right) {
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-3, dwarfWarriorRight);
    } else {
      dwarfWarriorCorpse.setFrame(0);
      gb.display.drawImage(x, y-2, dwarfWarriorCorpse);
    }
  } else {    
    if(this->isAlive) {
      gb.display.drawImage(x-1, y-3, dwarfWarriorLeft);
    } else {
      dwarfWarriorCorpse.setFrame(1);
      gb.display.drawImage(x, y-2, dwarfWarriorCorpse);
    }
  }
  if (digAnimationTime > 0) {
    digAnimationTime--;
    gb.display.drawImage(x, y-2, punch);
  } 
  drawLoot(x, y);
}

SkeletonCart::SkeletonCart(byte _posX, byte _posY, byte _baseHp)
  : Character(_posX, _posY, 1, _baseHp) { 
    stunTimer = 0;
    attackDir = Vec(99, 99);
  }

void SkeletonCart::draw(int x, int y) {
  if (this->moveDir == _right) {
    if(this->isAlive) {
      if (this->stunTimer > 0) {
        gb.display.drawImage(x, y-2, skeletonStunnedRight);
      } else {
        gb.display.drawImage(x, y-2, mineSkeletonRight);
      }
    } else {
      mineSkeletonCorpse.setFrame(0);
      gb.display.drawImage(x, y-3, mineSkeletonCorpse);
    }
  } else {    
    if(this->isAlive) {
      if (this->stunTimer > 0) {
        gb.display.drawImage(x, y-2, skeletonStunnedLeft);
      } else {
        gb.display.drawImage(x, y-2, mineSkeletonLeft);
      }
    } else {
      mineSkeletonCorpse.setFrame(1);
      gb.display.drawImage(x, y-3, mineSkeletonCorpse);
    }
  }
  drawLoot(x, y);
}
  
void SkeletonCart::takeAction(byte x, byte y) {
  if (!isAlive) return;
  if (stunTimer > 0) {
    stunTimer--;
    return;
  }
  if (attackDir.x == 99 && attackDir.y == 99) {
    if (posY == player.posY && world.isInEyeSightX(Vec(posX, posY), Vec(player.posX, player.posY))) {
      posX > player.posX ? attackDir = Vec(-1, 0) : attackDir = Vec(1, 0);
    }
    if (posX == player.posX && world.isInEyeSightY(Vec(posX, posY), Vec(player.posX, player.posY))) {
      posY > player.posY ? attackDir = Vec(0, -1) : attackDir = Vec(0, 1);
    }
    this->changeDirection(attackDir.x);
  } else {
    Vec nextPos = Vec(posX + attackDir.x, posY + attackDir.y);
    if (world.isWall(nextPos.x, nextPos.y) || world.world[nextPos.x][nextPos.y] == surfaceWithCharacter) {
      stunTimer = 2;
      attackDir = Vec(99, 99);
    } else {
      this->defaultAction(nextPos, 2);
    }
  }
}

BombFrog::BombFrog(byte _posX, byte _posY, byte _baseHp)
  : Character(_posX, _posY, 2, _baseHp) {
    hasBomb = true;
    bombTimer = 3;
    explosionTimer = 0;
    gold = 2;
  }

void BombFrog::draw(int x, int y) {
  if (this->isAlive) {
    if(this->moveDir == _right) {
      gb.display.drawImage(x, y-3, bombFrogRight);
    } else {
      gb.display.drawImage(x, y-3, bombFrogLeft);
    }
  } else if (hasBomb) {
    gb.display.drawImage(x, y-3, bomb);
    gb.display.setCursor(x+sprite_size, y-3);
    gb.display.print(bombTimer+1);
  } else {
    drawLoot(x, y);
  }
  if (explosionTimer > 0) {
    explosionTimer--;
    gb.display.drawImage(x-sprite_size, y-sprite_size, explosion);
  }
}
  
void BombFrog::takeAction(byte x, byte y) {
  if(!isAlive) {
    if (bombTimer > 0) bombTimer--;
    else if (hasBomb) {
      explode();
    }
    return;
  }

  Vec nextPos = astar.getNextTile(Vec(posX, posY), Vec(player.posX, player.posY), false);
  if (nextPos.x == 99 && nextPos.y == 99) return;
  this->changeDirection(nextPos.x-posX);

  if (nextPos.x == player.posX && nextPos.y == player.posY) {
    takeDamage(1);
    bombTimer = 2;
    posX = nextPos.x;
    posY = nextPos.y;
  } else {
    setPosition(nextPos.x, nextPos.y);
  }
}

void BombFrog::takeDamage(byte dmg) {
  if(random(0, 2)) soundManager.playFX(ENEMY_HIT);
  else soundManager.playFX(ENEMY_HIT2);
  
  camera.shakeScreen(4);
  currentHp = 0;
  moveDelay = 1;
  isAlive = false;
  world.enemyCount--;
  world.world[posX][posY] = world.world[posX][posY] - 3;
  player.increaseCombo();

  if (player.bloodlust && player.currentHp < player.baseHp && random(0, 12) == 0) {
    player.currentHp++;
    soundManager.playFX(HEART);
  }
  if (world.enemyCount == 0) {
    soundManager.playFX(PORTAL_OPENED);
  }
}

void BombFrog::explode() {
  bombTimer = 0;
  hasBomb = false;
  explosionTimer = 5;
  soundManager.playFX(EXPLOSION);
  explosionRound = true;

  for (short i = -1; i <= 1; ++i) {
    for (short j = -1; j <= 1; ++j) {
      if (player.posX == posX+i && player.posY == posY+j) {
        player.takeDamage(3);
      } else if (world.isInBounds(posX+i, posY+j) && world.isWall(posX+i, posY+j)) {
        world.world[posX+i][posY+j] = world.world[posX+i][posY+j] + 1;
      }
    }
  }
}

BombGoblin::BombGoblin(byte _posX, byte _posY, byte _baseHp)
  : BombFrog(_posX, _posY, _baseHp) {
    hasBomb = false;
    moveDelay = 1;
    stunTimer = 0;
    bombTimer = 0;
    gold = 20;
  }

void BombGoblin::draw(int x, int y) {
  if (!isAlive) {
    drawLoot(x, y);
  } else if (this->hasBomb) {
    if(this->moveDir == _right) {
      gb.display.drawImage(x, y-3, bombGoblinFusedRight);
    } else {
      gb.display.drawImage(x, y-3, bombGoblinFusedLeft);
    }
    gb.display.setCursor(x+sprite_size, y-3);
    gb.display.print(bombTimer+1);
  } else if (this->stunTimer > 0) {
    gb.display.drawImage(x, y-3, bombGoblinStunned);
  } else {
    if(this->moveDir == _right) {
      gb.display.drawImage(x, y-3, bombGoblinRight);
    } else {
      gb.display.drawImage(x, y-3, bombGoblinLeft);
    }
  }
  if (explosionTimer > 0) {
    explosionTimer--;
    gb.display.drawImage(x-sprite_size, y-sprite_size, explosion);
  }
}
  
void BombGoblin::takeAction(byte x, byte y) {
  if (!isAlive) return;
  if (stunTimer > 0) { 
    stunTimer--;
    return;
  }
  if (hasBomb) {
    if (bombTimer > 0) bombTimer--;
    else {
      explode();
      stunTimer = 4;
      return;
    }
  }

  Vec nextPos = astar.getNextTile(Vec(posX, posY), Vec(player.posX, player.posY), false);
  if (nextPos.x == 99 && nextPos.y == 99) return;
  this->changeDirection(nextPos.x-posX);

  if (!(nextPos.x == player.posX && nextPos.y == player.posY)) {
    if ((bombTimer+3)%2) {
      setPosition(nextPos.x, nextPos.y);
    }
  }
  if (player.posX >= posX-1 && player.posX <= posX+1 && player.posY >= posY-1 && player.posY <= posY+1) {
    if (!hasBomb) {
      hasBomb = true;
      bombTimer = 3;
    }
  }
}

void BombGoblin::takeDamage(byte dmg) {
  if(stunTimer > 0) {
    Character::takeDamage(dmg);
  } else {
    soundManager.playFX(ARCADE_OFF);
  }
}

Player player;
